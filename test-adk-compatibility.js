#!/usr/bin/env node
/**
 * Test script to verify ADK compatibility fix for schema types
 * 
 * This script demonstrates that schemas generated by the ToolRegistry
 * now have lowercase types and handle array types correctly.
 */

import { ToolRegistry } from './build/tools/registry.js';

console.log('Testing ADK Compatibility Fix for Schema Types\n');

// Get all tools with schemas
const tools = ToolRegistry.getToolsWithSchemas();

console.log(`Found ${tools.length} tools\n`);

// Test function to recursively check schema types
function checkSchemaTypes(schema, path = 'root') {
  const issues = [];
  
  // Check if type is lowercase
  if (schema.type) {
    if (typeof schema.type === 'string') {
      if (schema.type !== schema.type.toLowerCase()) {
        issues.push(`${path}: type "${schema.type}" should be lowercase`);
      }
    } else if (Array.isArray(schema.type)) {
      issues.push(`${path}: type should not be an array (${JSON.stringify(schema.type)})`);
    }
  }
  
  // Recursively check properties
  if (schema.properties) {
    for (const [key, value] of Object.entries(schema.properties)) {
      issues.push(...checkSchemaTypes(value, `${path}.properties.${key}`));
    }
  }
  
  // Check array items
  if (schema.items) {
    issues.push(...checkSchemaTypes(schema.items, `${path}.items`));
  }
  
  return issues;
}

// Check each tool's schema
let totalIssues = 0;
for (const tool of tools) {
  console.log(`\n=== ${tool.name} ===`);
  console.log(`Description: ${tool.description}`);
  
  const issues = checkSchemaTypes(tool.inputSchema);
  
  if (issues.length === 0) {
    console.log('‚úÖ Schema types are ADK compatible');
  } else {
    console.log('‚ùå Schema type issues found:');
    issues.forEach(issue => console.log(`  - ${issue}`));
    totalIssues += issues.length;
  }
  
  // Show root schema type
  console.log(`Root schema type: "${tool.inputSchema.type}"`);
}

console.log(`\n=== Summary ===`);
if (totalIssues === 0) {
  console.log('üéâ All schemas are ADK compatible!');
  console.log('- All types are lowercase strings');
  console.log('- No array types found');
  console.log('- Schemas ready for MCP serialization');
} else {
  console.log(`‚ùå Found ${totalIssues} compatibility issues`);
  process.exit(1);
}
